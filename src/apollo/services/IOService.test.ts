import {addFeature, addTranscript} from './ProteinCodingService'
import {GenomeAnnotationGroup} from '../domain/GenomeAnnotationGroup'
import {getSequenceForFeatures} from './SequenceService'
import {
  addOrganismWithDirectory, deleteOrganism,
  deleteOrganismFeatures,
  getOrganism,
  removeEmptyCommonDirectory
} from './OrganismService'
import {addUser, deleteUser, getUser} from './UserService'
import {User} from '../domain/User'
import {Role} from '../domain/Role'
import {sleep} from '../functions/Timing'
import {Organism} from '../domain/Organism'
import {annotationEditorCommand} from './ApolloAPIService'
import {writeFile} from './IOService'

const TEST_USER = 'test@test.com'
const TEST_ORGANISM = 'testAnimal'
const TEST_SEQUENCE = 'Group1.10'
const LOCAL_APOLLO_DATA = `${__dirname}/../../../temp-apollo-test-data`
const APOLLO_DATA = process.env.DOCKER_CI ? '/data' : LOCAL_APOLLO_DATA


// 1. get features on sequence (should be none)
const getFeaturesCommand = <JSON><unknown>{
  'username': TEST_USER,
  'password': 'secret',
  'organism': TEST_ORGANISM,
  'sequence': TEST_SEQUENCE
}

/*
* From FastaHandlerServiceIntegrationSpec
*/
test('write a fasta of a simple gene model', async () => {

  // 2. add transcript
  const addTranscriptCommand = <JSON><unknown>{
    'username': TEST_USER,
    'password': 'secret',
    'organism': TEST_ORGANISM,
    'sequence': TEST_SEQUENCE,
    'features': [
      {
        'location': {'fmin': 1216824, 'fmax': 1235616, 'strand': 1},
        'type': {'cv': {'name': 'sequence'}, 'name': 'mRNA'},
        'name': 'GB40856-RA',
        'children': [
          {
            'location': {'fmin': 1216824, 'fmax': 1235534, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'CDS'}
          },
          {
            'location': {'fmin': 1216824, 'fmax': 1216850, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
          },
          {
            'location': {'fmin': 1224676, 'fmax': 1224823, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
          },
          {
            'location': {'fmin': 1228682, 'fmax': 1228825, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
          },
          {
            'location': {'fmin': 1235237, 'fmax': 1235396, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
          },
          {
            'location': {'fmin': 1235487, 'fmax': 1235616, 'strand': 1},
            'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
          },
        ]
      }]
  }

  // add transcript
  const annotationsFoundResponse0 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound0 = new GenomeAnnotationGroup(annotationsFoundResponse0)
  expect(genomeAnnotationFound0.features.length).toEqual(0)

  const returnObject = await addTranscript(addTranscriptCommand)
  const returnGenomeAnnotationGroup = new GenomeAnnotationGroup(returnObject)

  expect(returnGenomeAnnotationGroup.features.length).toEqual(1)
  const returnFeature = returnGenomeAnnotationGroup.features[0]
  expect(returnFeature.name).toEqual('GB40856-RA-00001')
  // 2 exons, 1 CDS, 2 non-canonical five-prime splice sites, 1 non-canonical three-prime splice sites
  expect(returnFeature.children.length).toEqual(6)


  // 3. get features to confirm it is addd
  const annotationsFoundResponse1 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound1 = new GenomeAnnotationGroup(annotationsFoundResponse1)
  expect(genomeAnnotationFound1.features.length).toEqual(1)
  const addedFeature1 = genomeAnnotationFound1.features[0]
  expect(addedFeature1.location?.fmin).toEqual(1216824)
  expect(addedFeature1.location?.fmax).toEqual(1235616)
  expect(addedFeature1.children?.length).toEqual(6)
  expect(addedFeature1.uniqueName).toBeDefined()

  // 4. get and confirm sequence
  const proteinSequenceResidues = await getSequenceForFeatures(TEST_ORGANISM, TEST_SEQUENCE, returnFeature.uniqueName as string, 'peptide') as string
  expect(proteinSequenceResidues).toEqual('MARDIHRQSLRTEQPSGLDTGGVRFELSRALDLWARNSKLTFQEVNSDRADILVYFHRGYHGDGYPFDGRGQILAHAFFPGRDRGGDVHFDEEEIWLLQGDNNEEGTSLFAVAAHEFGHSLGLAHSSVPGALMYPWYQGLSSNYELPEDDRHGIQQMYEINQDIFFFIFFSHD')

  const cdsSequenceResidues = await getSequenceForFeatures(TEST_ORGANISM, TEST_SEQUENCE, returnFeature.uniqueName as string, 'cds') as string
  expect(cdsSequenceResidues).toEqual('ATGGCGAGGGATATTCATCGACAGAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAA')

  const cDNASequenceResidues = await getSequenceForFeatures(TEST_ORGANISM, TEST_SEQUENCE, returnFeature.uniqueName as string, 'cdna') as string
  expect(cDNASequenceResidues).toEqual('ATGGCGAGGGATATTCATCGACAGAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAAATTGTAAAATACATTTTGTAAGTAAAATATGGAAACAAATTTTTTCTTCATATGTATCAGTTAATGAAATAATAATAGCTTG')

  const genomicSequenceResidues = await getSequenceForFeatures(TEST_ORGANISM, TEST_SEQUENCE, returnFeature.uniqueName as string, 'genomic') as string
  expect(genomicSequenceResidues).toEqual('ATGGCGAGGGATATTCATCGACAGAGGTACCATCTATGTGATCGTAAAAACATCCAAATAATGAAATAGGAACTATTTCTACTGCTCTCTGGTAGGACAAGTAAACATTAAAAGTTTGAACATTTGTGAAAATCTTGCAATTGACCGCGTTTTACTTTGGTTACAATCGTTTAAGTGTTTTATTATTTTTCTGTGTTTGTGCTTTAATATTTAATTTTGTATCGAATTGTAGATTATTAATGATGATTCGTGATGTAACGATATTTGACGAGATTAAAATTTAATAATGAAATTTTATTAGTTTTGTTGCATTGAATTTGAAGAAGTGAAGTAGAGTAAATTCGAGAGATTTTATTGTATGAATTTGAATTGAATTTGAGAGGTTAGATTAGTTCTAATAGTTTAATATGTTGAAATTTTGTTCGTTGTAAATCAGTGACATTTTAAAAATATTATACCATTTATGTCAAATTAAATTAAAATTGGGTAAGTAAAGTATTAAGAAAAAAATTTTTCATTAGTTTGTCAGATTTCTGTCAATCTGTTGCACGTCTCTTCGATTGGCGAAGTAAATCGATCTCCATGGACTTGGCCACCGTGAAAAAATTCACGTCGCTATTGGAAATCTACGTCGAATACCAATTCTGCAATCGCGTGCACACAATGTTTTCCGTTTCGTGGCGAAACGCAGTGCAACAGTTTATAGAATTTCTCCCGGAATTGGAAATAGGACTTGTTTCGCGTGATGTCGCTGAAACAGTTTCCTCTTGATGCTTATTCGACCAAGACAAAACGATAACGGAATGTGGTTTTGTTGGAAAATTTCAATCGACAAAAGACATTCAACTGTCTGTTTGATATTTCGTTTAACGTGACAAATTAGTATGTTGAATTTTTCTTATTTTATTTAGAAATTCAGACTATGTTTCGTTAATTTTATTTCGTACTATCTTTGGAAAAAATATAAACTAAAAATGTACATATAAAAATAAATTGAAATATTCTCAATATTTATAAATCATTTATAAATTATTTTTTAGAATAATAAAAGAAGAATAATAAAAATTATAAAATGCAATTTCCAAATAATTATTTATTTATATTTAAGAAACGTAAAAATTTGCATGAAATTATTAATTACAATATGTAACATTGGATATTTCAACAGTATAGAAATATAGAATTAATGAAAATTTGAACAATGAACATCGCGAATATAATTATTACAAGTCACCGAATTTCAATTATTTTGTTTAGCGATGACAGAAACTTGGAACGTGATTTCTATGAACTGCAACTGTGAATTATATATAGAAATGATGTAAAATCTTATCTTTCCTTCATTATAGTTTTGATAGTTAAATGAAAAATTTAAAATATTGCTATTATTATCTAAAATTATATTTAATTATTTAAAAAAGATTTTTATTAAAAAATTTTGTTAAAAAACTTTTATAATTTTTCTCTTGAAATATTAATTTATTTTTGTAGGGCATACAAATATGAGATATATATATATATTACCATTTTTATTGATTGTTATGTATCTTCTTTCTTCTATTTTCGTTTTTATGAAACTTCATTATTTTCATTATTTTCTGTATCTGGATAATAATATATTATTTATATAATGAGTAAAATAATATTAAGAAAATTTTCCTTCAAAATGTATAAAATATCATTTCATTTATAATTTATATCATATATTCATATACATCATGCGTTACTGATTTAAAATTTTAAATAATCAAAGATATTTAAATTTTTATTTTCTTTCCATGAAATATTTAAAATAATATCATTAACCTATCTTATTTATAACATTGCATTTTATACAAATGAATTTTTCGGTTTATTTCGTTTTTCCTTTTTGCTTCTTATTTATTGCGCATCGTGTATAATCCGTATAATCAGAGAAACGCAAATTTTGCGATAGTTAGAAAAGAAGGACAGGAATCGCGCAGAGCAGAAAATTAATATCGCAGCATGATGCATTGTTTCATTTTCTACTTTATTTCCTTCGTTCCAATTCGTGTGAGTTCATGAACGCTCAACCATTTTGTTTCGCAGCACGATTTCAATTCACTCTCGTTTTGCTCATTATTGCTGAATTCATACGTTGTTTCCCTAGTTTCAAAAAGAGAGTTCATCTTTCTGTCGCCATACTCTATAGTTTTATCATTATTTTTTTTGTAACTAACGTCAAATTTTATTTTTCCTAAAATTATAAATATAATAATATATAAATAAATTAATAAAATAATAATAAATATACTTAAAAATTGATAATTTACATGTTCTTTTCAAAGTTTTTTGCACGAGAATGTTGTAAAAGAAAATATAGAATATAATAGATTTATTTGTATTGCATTTTGTTTTTTAAATTTTTTTCATTTTTTCAGAAAAAAAATTAATTTTTTAAAAAAAATTTGTATTTATTAAAAATATTTTTTAAGATTAATAACTAATAAAAAATAAAATAAAATGACCAAAATTTCATAAATAAATGACATAATTATTATATGTATGAAAAATTTTTTAATTTTCAAAATTGTATGCGAAATATAATTATGAAAGTTTATAGAATATGAGTTATAGTTTCAAAAATATAAATTCATTAATGTAAAATGCATTAATATTAACATAATTAATCTTGTCATCGTATTATTCTGGAGTCTGAACAGCTTGTCAAGTGATAAAAAAAATATTTCTTTTGTTACCGAATATTTTTTTCACCATCTGGATATATTTCGTGCGTACATAACCACAAAAATAAGAAAGAAAAAAGCTCGCAAGTGCGCATCTCATTGTTCTTGAGATCCCATTTTCTTCCTTTTTTTCGTCTTTTCTTTTTTTTTCCCCCTTTTTTTCTTTTTTCTTTTTTTTTTTTTTTTTCATGGTGAAGACACGTCGAAGATGAAAAGGAGAGAAAGCTTGCGAGAAATATTCCACAAAGGAAAATTATTTTCTTCTTTTCTTTTTTACGTGATCTTCGTCGAATCGAACATTTTAATTATGGACTCATTTAAAATTGCTTTTATACTCCCATTCCCTCTACAATTTTTAAATGGTTATTAGAAGATAAACATATTATTTAAAATTATAGATATATATATATCTCGTATAAATATTCTTTCATTTTAATTCATTTAATTAATAAATTTTGTAAAATTAAAAGTAAAATTTATGGATAAAAGTGCAGTTTTATAATCTTATTAAAATAAAATTTTTGACTCAACAAACTAAGCAATTTTATTTAAATGTCTCGTTTTTTAAATTAAATTATGAATTTTCTAAACTATTTGGTCATCGTCTACATTTTTAATGCAAATTTTATTATCAATGAAATTGAAAAACATTCTTTCAAAAAATATTAAGAAAAAAATTGCAATTATCTATAAAGAATAATAATTAATCTATTATTAATCTAGATTAATTATTAACTTATATACATAAGTTAAATTAGGTTCACAGTCTTTAACGTATAGAGATTTTAATCATATAGAAAGAACAAAGTAAGGATCTAAACGATGAAGAAAGTTTGTTTTATGGATGAAATATAAACTTCTTTTTTATTATGTAATTACTTCATAAAAACTTTTACACAGTTTCACTTTATGGAGATTGATTGTTACTTGGCTATGGCAAGATGTATTGCAATTTTCGCATTTAGTGTGTTCCGTATCCATCTCGTCATATCTTACCAACTCGTTTCAAACTTTCATTATGTCAGTCTTTTTTCAGTTCTCCTTTGATCACGTTGATGCAGTCACGTGCTCTTTATATCTCTCATCACCTTTTTTTTTTTTTTATCTTTTATGTAGCATATCCGAAATTTGTGCTTTTGTTGACATCTTTTCGTTATATTTAGAATTTCTAATTGTACGTATGAGTTCTTTCAAACTTAAATTGATCAACTCTATTTTCTAAAAGTTCTTCATTTTAAAAGTAATATAACGTTTATTCGTATATTAAATTCTTCTCGCTATATTTTTGAAGGTCATTCTCGTTTGAATTCAGTGAAGCGAATAATTTCACATCAAAACAATCATAAATTTCTTTAAATGTTTTGAACTGACAGTTCTAAACATTAAAAGAACAGAAAAAACATTTCACTACCTGCCTTTCTATATATTCGTCTTTGTCTATAAAGATAAAACGAGCTCAAATTTCATCTCCTTAGCAACAGTATGTCACTAAAGTATATATAAATATTAGTATATATAATATCGTGACCAACTTCAACTTGTGGAGCTTATAATGAATAAATACTGAACATATAATATTATTAACGTATATTTTTAACGTAATTAGAAAACAATTTATCTATATATTACTTTAAATATTTTTTATAAGCATAACAATTCGAAAAAGTTTAGAAAAATTTATATTCCTAAGTTAAATAATTTGATATTTCTTAAAAAATAAATTTACATATTTAAAAACTACAAATAATATACGTATTACAAATAATTTTTATAAATATATTTTCTTATATATTTGTTCGTACCAAAACATGTGAAAAATATTTTAACCTTCGTTTTTCAGTTGAGAAAGTCTAATCTAATCTTTATTACATTCTAGATATCCAAGTTTATTCTTGCTTTCATCCAATTTCTTTATAAAGGTTGGACCTTGAAAGTAATATTTTGATCAGAATTTACCGATCGTGAAACACTGAAACGCAATGCGCCGTTGTGTTGTCTCGACATGTCGACTCATAGGCACGTAACTGCGTATCTGCATTGCCTGCGGCTCTCCGTGTCAGCTTTTTAGTTTTTTACCCTCATGTACACGAAAAGGGCGAAACTACCATTCGAAATTCTCCAAGCTACAATGCACAGGTGTTCACAAAAAAAGCAAGTAAACCCGGCTCACTTCAATGAATAGAGATTCGTTCTCTCAACTCTGTTTCGCTTTTTCCTTCCTAATAATCTTTCCGTTGATTCCTTCTTCTAATTAGCTTTCGATGGAACGATTCACGCATAGGTTTAATTAACGACCAACTTATTCGTGATTCATCCTCTTAGGATAATCAAAATAGATTTTAATTTGGATTTTAATCTGAGGATAAATAGATTGAAAAAAATCTTAAATTTATAAAATGTTATAACAATGGATGTATAGAATATTTTTTCTGAATGAATAGTCGTTTCGAATTATTTGCGATATACGCTTCATATCTTTGCAAAAGTAAATTTACATTAGTGACATTTGTAAACATTTTGCACGGCCAATAGGTATATATATATATATATATATGACTTCTATTGTGTAGAATGTCAAGGCTTACTCGTGTAGTAGAACTAAGAAGACGACGATCTTTCTTTATCAACATCTGAATTATTGATTAAATACAAATTGTTTCTCTAAGATTTTTTCTAAAATAGAAACAATAGAATATTTCCTGGAATATGTTGATTTTATATTTTTTGTTTTATTCTTAAACTCTTTTTTTGTTGTATAACACGTTATATAAGATTTATCGATTTCTCTTTTCATTTACTATTATTAAAGCATAACATGTAGATCTACATTCTCATCTATCATTCGAACATATTGTCTTTTGTACACTAATGACTCAAATATTAAAAAAAAAAATTATTTTGATGACATGTAAAAAGAAATAAAAAATGATTAAATAGAACAGATAATTTGATAATTATTTGAAATTATAAGTCTTTTAGGTTATGTCTTGAAATAAATAAACTATGAAGCTATGATAGCGGCTGCATTTTCATTTAACCTAACTAATATGAAATCATTAAAAAATAACATTTCTCGTTCTATTATTATTGCTATAAAATATAGGAATATAATTATATTTAAATAAATAAAAAGAAACAAGTAAAAATATTTGATCGCAAATTGAGAATAAATTGAGAGTTGTTTTAGTTAATATCTGAACGTTATCTCGAGTCTTATTATCTCAACTATTTCGAAACTTCCGAACCAATTATCCAGTCTAGAAACTCGAGCATATTTGAACAGTTCGTACTTCTTTTTTTTATTTTTTTTTTACCAATATAATATTTACTAACGCTATAAATCTTCTATTAAAATTTTTAAACTCGGGCGAGTTTTATAAACGCGTGATGTATAGAAATAAAAGTGTTATCAATAAGTTGCTTCCAACATCAACGATTTCTATCGATCCTGATTAGTGGTTGATGGAAACGTTTTACAAGATAAATTGTTTTTGTCGTGGTTAAACCCCGGTCACGCCGAGTTAAATGCGGGGATTATTGCCATTGATTAAGAGCAACACTGATTGCGAAAATTACAATGCGCATTCAAGTCTTTGTTTTTACTGTTAACACGAACACCTGAATTTATTAAATTAAAATCAATTTATTAACCATTTTTCTCTATCAAAAAAACAAATATTTTTATAATAAATGTAATAAATACACGCTATTACAAATATATTAATTTAACGAAAAAAAATAAATAACAAAATTAATTAATAAGAAACTTCCTAGAAAATCCCTAGAAAAGTTAGCCAATCGACGAACCAATAAAGACCATTATTTTATCGACTCTCACTCTTCCTAGTAAGTATATATAATACAATATTTGCTTCGAATCTTTCGAATTGAATCAGATCATCCGATTGATCGATCGATTCCAAATCAAAAATATATTTAAAGAGGTATTCGATCGATAATTAATTTTTTTCTCTCTTCTCTCTTTTTATCGGTTTTTTTTTAATGATTGAAAAGATGAATTCAGCGATACGATGTTTGCCATAAAGATAGATCGATCCATCTATAAGGCAAACAGTCCGCGCGACGTGTAATCCTTTTAGGGGATGGTTCGGGCATAGCCTGTTTGCACGTTCTTGAAATGTTCCCGTTTAAAAGCCGGATGATGTTAATTATCCGAGCGGGGTGTACGTGTGGTAGGGGGTTGCAGTTTAAAGGTTGATTTTTATAGCTTGCGTCGTTAGTGTCGCGGGTGTATCGGAGGATATCCGGTTTCGGTCGATTAAAGGGGACCACATATCGCTGAACGATCCGACTAATTAATTACTTAACCTTTCGAGCTCGAAGCATATATTTCTCATAACAACTCGTTAATATTCACGCCTTTCGTAACGTGGTATATGTAGAATTAATTTTTTTTTTTTTTTTAAAGAATGATACGTCCGAGTTATTTCAAGATCATACGTTGTTAAAGATTATTGAATTTGTCAGTGTTATAAATTAAAAATAATTTAAGAGAAGTTAAAATTAAGTCTTATTCAGTACTACACATTGACTGCTCACATTTTTTACCGAATATAAAATATAAAGAAAATAGAATATTTTATTTTTTAAGTAAAAAAGAAAAAAAGTAACAGAGAAATATAAAATTGAACGAAGTTGAAAAATAATTATCTTCTTTCGGAACTTTAAAATTCTCTCGAGTTTACAATTAGAAAAAAAACTTTTCCACTTTTATCTACGCCTAATCGGAAACTGGGCGTTCCACCCGCCCAGTTTCCTGATTTCCCACAAAGTGGAAACATAATTCCAGTAATTTCGCGAAATTTCCGCGTTTCGTCGATGCAACAGCTCCCACCCCCTCCCCTTATTACTTTCCTTTCCACTTCGGGAATAATTTAGCTAATTTCCTAAAGCTTCGACAACGATTGAATCGTCTTCCTTTTCATCGTTTCCCTCGCCGGGGGAAAGCATTTCCTCCGGTTTGCCGGCGCGGTTATCGGATCGAAGGCGTCTCTCCTTCGAGGAGAAGGCCCCGATAAAGGGAGCGGACAAAAGCGTCGCCCGCCGCCGATCGATTTTTCGCCGGATTCTCTTCGTCGTAACGATTCTCCTTTCCTTCTTCCCTTTTCTTCTTCTTGTTACAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGGTGAGTTATCTTTTTTTTTCTTTCTTTCTTTCTTTTTTTTTTTATATAATATGATAATGATTGGTTGGACAATTTGTGATTACCATATATTTATATCGTATATTATTTATCGTATTATATTATTTATCGTATTATATTATTTATCGTATATTATATTTATATCGTTCGTATATTATTTTTATTAAGTATTGAATAGGATGGGATACAAAGTTGAAAATTTTTTATGATTATTAATAGGATTAGATTAAAATATTCTGGATTTAATTTATTCTGATTTTTTTTATTTTGTGAGACTTAAAATAAATTTGCTCGAAATAACAATTTAATAAATAATTTATATCTATTGTAAAATTTCAATCATAGTGTTTAAAGTAACATTTGTCAATTTTTTTTTTTTAAATTTGTGAAGTATTAATTATTTATATTTTTAATGATAATTGTAGAATAATGAAATTGTTGATATATCTATGGTTACTGCTATATCCACGAAAATAGGCAAAATACTTTTAATTTTATTCGGTTCAGGGCACGTTTTCATCCAATTTATACGTTCTATTGAGATATTAACACAAGTATTATTGAGATATCAATAATACTGACGCGAATCAGGATGATAATTTGAATCCCTCTATAAAAGTTGAAGGGAGAAAACAAAGAGAGGGGAAATAATGTGAGCGGACAAAGGGCGGGATCAATAGCTCGATTCACGGGCCTCCTTGTTATCGGGAAATTTATCGCAATGACGCAACTGGAAATGAGAGTACGATTAAACGGGAAGGGTTTATTTAAAATCTGCTATTTGCGCGAATTGTTCCGCGGTCGTGAAAGTTACGTATTCTGGTGCGCGTTTATACGTTCGTGAAATATGTCTGGATATAAAAAGGAACGATATAATAAAAAAAAAAATGTTCAATTTAAATAAGATTTAAAAGATTGTTTCATATTATGGCCATAATGATAAATTGTCGAATTTTAATATCGTAAATTAATTATAATTAATTATCAGGTAACAAATTATGACTAGGTTTCTTAAAATTGTATAATTTTATATCGAATGGATATAAAAAGAAATGAAAAAAAAAGAGAGAAAGCTTCAATTTACATAATGAATTATTGAATTATAATATTATAAATTAATTATAATTAATTGTCAAGTGACAAATTGTAGGTTATGAACTCGTAGATTTCTAGTGACAAATTGTAGGTTATGAACTCGTAGATTTCTAGTGACAAATTTGTAGGTTATGAACTCGTAGATTTCTTGAAATTATTCCGAATAGAATAAAATAGAATAAATTTTTTTTTATTTCATTCTTCAAATCTGTTTTATTATATTGAAAAATTTATTAAAATATTAGCGAGATAGCTAATTTATTGTATGCCAAGTTTTTTGATATATTAAGATGTATCGGTTGACATATTTTGCATCTTTAAAAAGTAAATCATTTTTTAAAGTTATATCAAAATCATAATTATTTTGCAAAAAAAAGTCTCGATTATGTCCTATAAACTCGAATAATCGAGTTTCCAATACTTCGCGATATAAAAATATTTAAAAATTTTGTAAACGAAGAAAAATTATTAAGCTCGAATATTAATAATTGTTAAATGAAGCTAATTTTTAATAACGTGTGAAATTAAATAAAATATAGTAAATAAATATTTTATTTTGGAAAGAAAAGTACTACGTTATTCCAATATATCGGTTTCGTATATATGTTGTTAGATATTTACATTGTATAAAACTCGTTTATCTAACTCATTGGTTTTCCTATAGTTTGTAAGTGATGAGAAACTGTTATATAATACATACCTAATTTGTGTGCAACATCTCGCATATAATATCTATGGCGCAGCTATCAGACTGCGCTAAAGTCTTCAACCGATTATCGATCATGTTCATGTCGGTAACACAGTTTGTTTCAAAAGTTCATGTATCTTGATCAACGTTCCTTTTTATAACAAGTTATAACTTCTTCATTAGATTATCGATATCATTTATTTTATAAAAAGTTTAATTTATCAATTATATCGTATAATTGTAAATGAAATTCGATAATTAAAAATAAATTTTTAATAAATAATTTATTTAATAATTATTTTATATTTTATATTTAATTTTATTATGACAATAATAAAATGATGTATTTCTCTTAGTATCACTAATCGAAATAAGCAAACTGTCTTTGTAATTCTCTTGGGATTGTAACGCTCAAATTAATTCTCCTGTTACACGTTTCGATTCCGACTATTGTATGTCAAATTAATATTGGAGAACCGATTCTATTAGCAGAAATAAGTGTTGAAATTAAATGATCGCAAAAGATTAAACTTTGCCTAAGAAGGTAATAATATTCGTATTGTCATTTTAATTTATATTATTTACTTTAACTCTTTCTTAAGAATTATTTTTTCGTTTTGACAATTAGAAAATAAAAATTTTTGTATTGCACTATTTTTCATTTTTATTTATAATTGATTATTTCTTAAAAAGAATAATTTTTTTTTTTTTTGAAAAAAAATAAAGATTTCATTAATTTAAATAAAACATATGGACGTGTACATATACTTGAATATTTATAATTAATAACCTCTAAATAATATTTGTATACAAATTTATAGGTTATATTTTCCTTAAACTAATTCCAAAAATTATTTGTATTTCTTTAATTTTAAAAGCTTGCTTTGAAATTTATCACAATACTGAAATTAATTTTGAATTAAGATAACAAGAAAGAAGAAGAAAGAAAAGAAAAGAACGATTCGCTTTCTTGATTAGCCATCCGAATGGTGCGATATCAGTGGCGTATCGGCTGTCTAGATAATCGACGAGTGCTCGCGAATGGAATTTAATTACGGCCCTTACGGTATAGCATATTTCATTCCAGTTCTGTAGAAAAGGCAAATTAAACGAACCGCAAAACTAAGCGATAGATTGTGCATTATATGTTCGAAATACCGTGAGAAATTAAAGATATAATGTTTAAATAAACAGCACATAAAATATTCTGTGACGTGAAAATATATATAATTAAATTTCTTTGTTAAAATAAAATATCATTCCAATATATCTAATATTATTTTTAAATATTTCTGATTAATATTTGTTTACTAAATTTTACGTGGAATTTTGTATAAATCTTATGTCATATTATATGAATCATATTATATATAGGTTAGTAATATAAAGAAGTGTTTCATTCTGGGCCTGCTAGAGGGATTCAACAGCAGCACCATCTAGATTGTTCATATTCTAGACGCCATATTAGTAATGGCATCCTAAATTAAAGAATGTGTTTGTGGAAATAATTAAGTGAATGCTTGTGAAAATTGTTTTTTGATGTGAATTAGTGACATATATAGAAAAAAATGTTAAAATATAAAACAAATAAAGGTAATTTTATCATGAATTGATAATTATAATTAGTCAATGATAAATTTCATCATATAAATGTAATATACGTATATATAAAACTATAGTTGAAAGGTTAAATACAAATTATTTGTCATGGGCAAATTTTATCATAAATTTGCTTTAAAACTCAAATCAGTTATTAAATACATACAAAAGAGACTTTATCCTTTCTTGCAATAAAAGTATTATTTTTCGATAAAACGCAATAAATCTGTTGCCAAAAATTCTCTTTTCATACTTAAGAATTATCCAAGCTATATTGATAATTCCACATATACCAATCGGCATGAAAAATTTGAATAAAGTCATGATTAAGAGATGATAGGATTTTTATTTGGATTAATATTAATCAAATTTTATAATTAATATTATAAATTACGTTTTATATATATTTATATTTTTATGTAATATCGACACTAATAGTGACATTCTGTTCTGTTTCAGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGTAAAAAAATATAATATGTCACATTTTCTCTTTTAATATATAATTAATAACTTTATTATTGTACAAAATGATTTTTAAAATAAAATAAAAATATTTTCGATAAAAATTTTATATTTTTAAATAAAATTATATTATTTCGAAACAGAAAACGATAGAAAATTTAAATTATTGTTAATTAAAGATAAATATGTCATATATTGTTTTTATATTCTATTAAACTCGTAAATCCGATGAAACCACAACTTTTTAATTCGGAATATCAACTGAAATCGAGAAGTTAACAATGAAATTTCAAACTAACGATTCAAACTCGTTCAAATATCAAAGTAAATACAATCTCTCTAGAATTATCCTCGGTCGGTAACAATAAATCGTGAAATTTAAACCTGGATTTTATAACAGTGACGAGAGAAAGGCATAAGAGAAAAGTTTAGAGGGATTCGCGGATGAAAAGAAAAGATTCGTGAACCGAGAAATTTTCGCAAGAGAAATCGAGCCCTTCTTGCTTTTTGGCAATTTTCCAATTCGGTCACCCCGTGACCGAAAGAAGAAATAAGGGGATGACGATAGAAAGCGTTTCTCTATTCCACCATATATGCCTTATCGCTATTCTCGATCGATAACATCGCTTATCGTTTTCTAGACTTTAGGAACATATTAATTTAACGATAAATCTTTGTTAAAAAAAATCACTTATAGAAAACTTGAAGTATTGTTCCAAATTTTTGTTCTATTTTTTGAAAATTATAAACTAAATAATTGCTTTTTATTAAACTAAATTTATTTTTTTTTATTGAAATTCAGAATTTATCAGTACTTGCAAATATTTTTTAATATTTTTTTGAAAATTTGAAGTTAATGGTATAAATATTCGATATAATATAGCGCTATTAATAGGAGAATTGAACGACGTAGGTAAATAACAGGATAATTATGTTAATGGAACTATGCAAGGCTAGCAGAGAATGAGGGCTAAGCCAGAATTATTAACGAGGCCAATCGAAATTACACCAATCACCTATCGAAATTGGACTACGTGTAATAATCCGCGATATAGGAAATAGATGATCGATTCTGATTAATCTTTCATGGTTCTTTTTTTATACTTGTGATATCAATCTTAACAATTATAATATCGATTATGAATAATGATTTAATAAATACGATACGAATTATTGTTATCAAGCTTTGAGAAAAAACATTTTTATTTGATAAAATTGGAAAATTTATTGCTTTTTTATTTTACATTCTTTATATTTCAAACTTAAGCTTCAAAATGTTTTACACCAGTAATTAAATGATGTGGTAATCGGACAACACATTCAGGAAATTGTATGAATTTACTCCCATGTAATTGGATTCAGAATTATACTCTCACCTCGAGAATCATTGACGAAATTGTTTGTTCTCGCTTCACTTTGATTATCCCTGTTTCGCGCATTGCATTGTGTCCACATGCATCGTGAAAGATATTTATCTTGTATTTGCTAGATTATTTATTGTCATATAAATTTTTGAAAGGAAAATTATTTGCTTATATTCTCAAATATTTTTAAAAAACAAATTTAATCGAGATTTTTAAAAAAAAAAACAACGCTAGCTTCGAGATTTTTTTTTTTAACAAAAATTATTTTTCGAATAAAAATTCAATTAAAGTTATACATTTTACATGTATCTTTGAGAAAGATAAAATTTTAATTTTACACAATAAATTTATTATATTTTCTGTTGATCAAATATTATTGGATAATGTTCATGCATAATTGAAAAATTAATGTTGTTATCGAGATTCGAATAATAGAAACTATGGTGGTGGGGCCTTTCACAGACAATATGTAGTGTTGGTGTCAGTTATGAATTGCTAATTTCATCGCTGACACATCCCGTCGAGAACCGTAGGACGGTTTGCAAACGATGAGAAGCCGGAACATCACGATTTGCAAATCCATTGGAAAATTAGCATTCTCCTCGAATAGTCTTGACAGAAATACATCTTGAATACGAAACAATTTGAAATTCTATCCAAAATAATCGTGTTTCCGACATATTTTTATGACGAATAAAAATAAATACGATTCGAAATATTTCTGCCTCCTCGTTCAATTTTCAAAATTTTATTTTATAATTTATTGCAAGATTACAAATTTATTTATTTCGTTTATTATTAAAATAAATTTAAATTTTTCTATTTCCTTCTTCTTTTTTACATTATTAATAAAATATAAATATGATTTTCGATGTATTTCGTAACTAATTATTATTTTTCGTGAAATATATTTTTTTCTTTATTTTCTTCTTTATAATTGAAATAATATGTATAAGAAATATTTTTAAATTGTTCGAATAAATTCGTATGTCAAAAACCTATGATCAATAACCATTATGGATCTGATCATGACATAATAAATAAGAATCAGAAAATAATGTATCGCGATATTCTGCGGATGAAACCGATTTAATTTTCTGGTTTGTGCATTTGATAGAAAATATAACAAACGACCGAATAAACACGTTACATATATACGTTACGAAGCGTTAAAATAATCGTGAGATATTTTTGAAAAAATAATTCCAGAAGCCAAAGCAAAAATCAAAAGTCTAACTTCATATGCTTCTATAATTTAACAAATAATTAATCAACATTTTCGTATACCAATTTTTCCGTTTTAACTTTTAAAATCCAAACATAACCTCCAAAGATGTCCATACATTAACAACACTTCGTATATATTTCCAGACAAGACATTTTCTTTTCTTATTTTGTTTCATTTATTGAAAACTTTCCGCTGTAAAATAACATTTAAAATTATTTATCAAGTAAAAATATGTAAGCTTCGATTTAGTGCGGAAGAATAGTACTTGAACTTTAAAAAAGAAAAAAAAAAACTTTAAAGTTCGCAAAAAACTTGCCGGGCATATCGAGCAATCTGAAATGCCCTTCGAGGACGACCGTAATCCATTCCACTTATTTTCATGCTCGTCCTCGAGCGGGCTTTTGATTAAGAGCACTTGACTCTGGTATATTGCAGCCAGCTGCTGTTAACGTCGAGATTCCGAAGTATCACGTGCGACGCGATGAAAGTTCGTAACGAGGAAACTTCCATCGGAAGATGCCACGATTTAGGCCTTCGCATGGACTTCTTTTAATTGACGCTTTCCAATGTCGAATTATCACTTATCTCAAATACGTCAAGTATTTTATCTTGATTTCGTGCGCGAAGTACACGTAATCTATCAGTTTGCAGTTTGTAAAAATTGAAGAATATTTTATTCGAAGTAAGTTGAGTTTTTAGGTTAGGTTTTAATTATATTTCGTTATAATTATTTATATATTGTAAAAAATAATTTATATATTGTAAAAATTGAAGAATATTTTATTCGAAGTAAGTTGAGTTTTTAGGTTAGGTTTTAATTATATAGAATTATTTCGTTATTTCAGAGTTTAGGCTAGTAATAACTTTTAGTTAAATTCTTATAACTTATTAATCGTGCACATTTTAATGAAATAATGAATTAGGTTAGGTTAAGTGCACGTGAAATTTCTTTTTTTTTACGTTTGTTAAAAATATGATTGTTTCAATTAATGTTAGGAAAGAATTTAGATTTAAATTTACTTTTTAAATATTACAACATTTTTCATAGAAAAATTAAGGATATATCACTTAAAAATATGAAATTACGTTTAAAAACATAACCTTTATATTTTCTGTATATAGAAGAGAAAATTTGTATTATCCATATTTTATTCAATTAAATTGACACACACGCATATTAAAATCCTCTTCTTTGATATTAAAATTTGTTAAGTCTCAACATAGGGGGGAAGTTAATCTCATTGAAATAGTACATACCTATATATATATATATATATATATATATATATATATATCTTTAGTCGAGTTGAAAATTTTAAGCTGGGATTCAAGCCAAACACGTTACGCTATTCGTGACAATACCGAGGGTTTACGGATATTGGCTATTCAGGTGTAATCCTTACTATGCCGGTTGATTACATCACCCATCCTTTTCTCAACTATCTTATTTCGTCTAGCTATCGCAAAGGCAGAGTGGGTCTTATTTCGATACTCGAGTCCTCGAAAGTTGGCAACTCTGCAAGCATGCGCAGTCTCACAAGACATATAAAACTATATATATTTCTATTACTGTTCGCAAAATTAAACCAACCTGATATATAATTTGGAAAGACTTCTTTGTTTCGATTCAATTTTGTTTTATCTATTTGTTTCGCATATTTGATATTTTTCATAAATTGTTTCAGAATCAGAAAATAAGATTTGTCCCAAGTTATATATTGAGAAGAAATTCATTGCCTCTCTATTTTAATAATTATTGCTCGAAGAAAGTTCCTGTATAGAATCTGAAATATGCTGATACTCGGTTTAATTAGTTCAGAATTTATTTTCTGCCTTTAATATCTCTTCGAAAACTATTTCCTTTAAAAATTTTCGAAATTGGTGATTATAGGTTAGGAAACATTCTACGTTATATATTTAAATACAATATAGAAATCAGAATTGTTTCTGAATAATACTTTGGGTAACTTTTATTTATTATTTTTAATTTTGATCTATTATATTTTCATTTATAAATAATTCTATTTGATGACAGGTTTTGAGTGACTGACTGACCATCGGTTGACCGCATCTACTGATTGTCCAATGTCTGACCATTAATTGATCAATGGTGTATTTACCGATCAGTAATTTACCAATAATCGATATTCAGAAAATCGAAATGTAATATAATATAGTACGTATAATAATATAAATTATACAAATTATACATTTTATTATTTTTTTCTAGATAATAAATTTTACATATAACGAATGAAGTTCGAATAAATTTAACGAAACATTAAATTACATTACGTTAATTTATCTCGACAGATATTACTACTAGAACGTTATTTAGAACAACGTTACAGTCGAACAGAATAAAAAGAGGAGAAATTGATGTAGATTTTTTTCAGTGATACGTGAGAAAGGAAACGATCGCATTTATTCCCTCTTTCGTAGTAACTGAGCACGCTTCCTTTATCGCCGGCCCTCCCAAGCTTTAATTTTATGATTTTGACCCACATTTTAAAACGAATGTCCCGAATGCGAAGCGAGACGGAACATAGATAAAAAAAAAAGAGATCAAAAGAAAAAGCACGTTAACGCCTCGAACTCGATGCCTCCTGTGAAAACTTTAATATCCATCGTCACAAACGTAAATATTATCAGGATTCCTCTTTCACGAATAATATATCCCGAATAGAAACGTTTCGTGTATATATATATATATACGATATTCGTCGAGATTAAAAGATTATTCCAGATATCGAAGAATTGTGAAATATTATACTTGTTTTCCATTCTATTACGAAACTAATATCTTTAAATGTAAGAAATGTAAAATTAAAATTTCTGATATACAAAATTTTAAATGTTAAATTATTCAAGTTGGTTAAATTTTATTTTAAGATGACCTAATATAATTTAATTTATGTTATTAATTTTTTATTGGAAAATAATTGCGAATTTTGAATAATTTTTTTAAAACAAATGAATCGATAATTAATCAATATTTATTATAACAATATTTGAATATTATTTCCACGAATTACATTTAATGTTCAATTTTATCCTCGCGCAATTTATGGCTTAGGTTTTCATTTATATATTGTTAATATTTGAATTATTATTACAAATTGATGTTATCGTATGTTAATTATTATTGTTTACTTCACCTTATCCGCTTCGTGTTTATATTTAATTAATCTCTTATTTTGTGTTTATGGATTCGTGGATTTAAATAAAATGTACAATTATTGTTTCTAATTAAATCTCTTTATCATTTATCTTTAGCGAAAATTTAATATATATATTTTTTTAAATTTCTTTTTCATGTTTTGTAACACGTAATTAATTTTTAAAATAAACTTTGTTTGAAAATTTTTTTTATATATATAATTATTTAATAAGTTTCTTATTAATTTTTTCAAACTTCATTTTCTGTGAACATGTTTCTTATGAATTTTCCTGAAAATGGAATAAATGCATACCACTCTTAGACTCTTAGATTATAAATAAATTTAGAAAATTTTGTACACAGTTTATAATAAAAATATGAAAAAATTGCAGTATTGCAAGTTAACAATCTATAAGAATTTCATTTCAAATGACTTATAAATCATCAACTTGGTATATCCTTTTAAAAAAGTATCCAAATTATCTTCTTTTTCCCTGGAATTTTATTTCCTCTTCAAAATGTTGTAGTTTGTTCAAGCTTGCTTAAAAGAAACTTTATTTTCTTTTTTCAAAAAACAAAAAAAAAACTTGGAGAAAGATTCTGGAAGGAAAATAGATATGGTCGACTAAGAAGTTTGAAACATTTCCTTCGCTTTCAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGGTGAGTGAGTGTATATAATTGCATAGTTGAAAAGCAATAATTATTCTAATTTATTATTCTGTACTAATTTAAAAAATAATGTTCTTTTTAGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAAATTGTAAAATACATTTTGTAAGTAAAATATGGAAACAAATTTTTTCTTCATATGTATCAGTTAATGAAATAATAATAGCTTG')

  // 5. write file / to text cds
  const writeFileObject = <any><unknown>{
    username: TEST_USER,
    password: 'sadf',
    type: 'FASTA',
    seqType: 'peptide',
    format: 'text',
    organism: TEST_ORGANISM,
    output: 'text',
    sequences: [TEST_SEQUENCE],
  }

  let fastaSequences = await writeFile(writeFileObject) as string
  expect(fastaSequences[0]).toEqual('>')
  expect(fastaSequences).toContain('(mRNA) 173 residues [Group1.10:1216825-1235616 + strand] [peptide] name=GB40856-RA-00001')
  let fastaLines = fastaSequences.split('\n')
  let cdsSequences = ''
  for (let i = 1; i < fastaLines.length; i++) {
    cdsSequences += fastaLines[i]
  }
  expect(cdsSequences).toContain('MARDIHRQSLRTEQPSGLDTGGVRFELSRALDLWARNSKLTFQEVNSDRADILVYFHRGYHGDGYPFDGRGQILAHAFFPGRDRGGDVHFDEEEIWLLQGDNNEEGTSLFAVAAHEFGHSLGLAHSSVPGALMYPWYQGLSSNYELPEDDRHGIQQMYEINQDIFFFIFFSHD')

  writeFileObject.seqType = 'cds'
  fastaSequences = await writeFile(writeFileObject) as string
  expect(fastaSequences[0]).toEqual('>')
  expect(fastaSequences).toContain('(mRNA) 522 residues [Group1.10:1216825-1235616 + strand] [cds] name=GB40856-RA-00001')
  fastaLines = fastaSequences.split('\n')
  cdsSequences = ''
  for (let i = 1; i < fastaLines.length; i++) {
    cdsSequences += fastaLines[i]
  }
  expect(cdsSequences).toContain('ATGGCGAGGGATATTCATCGACAGAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAA')

  writeFileObject.seqType = 'cdna'
  fastaSequences = await writeFile(writeFileObject) as string
  expect(fastaSequences[0]).toEqual('>')
  expect(fastaSequences).toContain('(mRNA) 604 residues [Group1.10:1216825-1235616 + strand] [cdna] name=GB40856-RA-00001')
  fastaLines = fastaSequences.split('\n')
  cdsSequences = ''
  for (let i = 1; i < fastaLines.length; i++) {
    cdsSequences += fastaLines[i]
  }
  expect(cdsSequences).toContain('ATGGCGAGGGATATTCATCGACAGAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAA')

  writeFileObject.seqType = 'genomic'
  fastaSequences = await writeFile(writeFileObject) as string
  expect(fastaSequences[0]).toEqual('>')
  expect(fastaSequences).toContain('(mRNA) 18792 residues [Group1.10:1216825-1235616 + strand] [genomic] name=GB40856-RA-00001')
  fastaLines = fastaSequences.split('\n')
  cdsSequences = ''
  for (let i = 1; i < fastaLines.length; i++) {
    cdsSequences += fastaLines[i]
  }
  expect(cdsSequences).toContain('ATGGCGAGGGATATTCATCGACAGAGGTACCATCTATGTGATCGTAAAAACATCCAAATAATGAAATAGGAACTATTTCTACTGCTCTCTGGTAGGACAAGTAAACATTAAAAGTTTGAACATTTGTGAAAATCTTGCAATTGACCGCGTTTTACTTTGGTTACAATCGTTTAAGTGTTTTATTATTTTTCTGTGTTTGTGCTTTAATATTTAATTTTGTATCGAATTGTAGATTATTAATGATGATTCGTGATGTAACGATATTTGACGAGATTAAAATTTAATAATGAAATTTTATTAGTTTTGTTGCATTGAATTTGAAGAAGTGAAGTAGAGTAAATTCGAGAGATTTTATTGTATGAATTTGAATTGAATTTGAGAGGTTAGATTAGTTCTAATAGTTTAATATGTTGAAATTTTGTTCGTTGTAAATCAGTGACATTTTAAAAATATTATACCATTTATGTCAAATTAAATTAAAATTGGGTAAGTAAAGTATTAAGAAAAAAATTTTTCATTAGTTTGTCAGATTTCTGTCAATCTGTTGCACGTCTCTTCGATTGGCGAAGTAAATCGATCTCCATGGACTTGGCCACCGTGAAAAAATTCACGTCGCTATTGGAAATCTACGTCGAATACCAATTCTGCAATCGCGTGCACACAATGTTTTCCGTTTCGTGGCGAAACGCAGTGCAACAGTTTATAGAATTTCTCCCGGAATTGGAAATAGGACTTGTTTCGCGTGATGTCGCTGAAACAGTTTCCTCTTGATGCTTATTCGACCAAGACAAAACGATAACGGAATGTGGTTTTGTTGGAAAATTTCAATCGACAAAAGACATTCAACTGTCTGTTTGATATTTCGTTTAACGTGACAAATTAGTATGTTGAATTTTTCTTATTTTATTTAGAAATTCAGACTATGTTTCGTTAATTTTATTTCGTACTATCTTTGGAAAAAATATAAACTAAAAATGTACATATAAAAATAAATTGAAATATTCTCAATATTTATAAATCATTTATAAATTATTTTTTAGAATAATAAAAGAAGAATAATAAAAATTATAAAATGCAATTTCCAAATAATTATTTATTTATATTTAAGAAACGTAAAAATTTGCATGAAATTATTAATTACAATATGTAACATTGGATATTTCAACAGTATAGAAATATAGAATTAATGAAAATTTGAACAATGAACATCGCGAATATAATTATTACAAGTCACCGAATTTCAATTATTTTGTTTAGCGATGACAGAAACTTGGAACGTGATTTCTATGAACTGCAACTGTGAATTATATATAGAAATGATGTAAAATCTTATCTTTCCTTCATTATAGTTTTGATAGTTAAATGAAAAATTTAAAATATTGCTATTATTATCTAAAATTATATTTAATTATTTAAAAAAGATTTTTATTAAAAAATTTTGTTAAAAAACTTTTATAATTTTTCTCTTGAAATATTAATTTATTTTTGTAGGGCATACAAATATGAGATATATATATATATTACCATTTTTATTGATTGTTATGTATCTTCTTTCTTCTATTTTCGTTTTTATGAAACTTCATTATTTTCATTATTTTCTGTATCTGGATAATAATATATTATTTATATAATGAGTAAAATAATATTAAGAAAATTTTCCTTCAAAATGTATAAAATATCATTTCATTTATAATTTATATCATATATTCATATACATCATGCGTTACTGATTTAAAATTTTAAATAATCAAAGATATTTAAATTTTTATTTTCTTTCCATGAAATATTTAAAATAATATCATTAACCTATCTTATTTATAACATTGCATTTTATACAAATGAATTTTTCGGTTTATTTCGTTTTTCCTTTTTGCTTCTTATTTATTGCGCATCGTGTATAATCCGTATAATCAGAGAAACGCAAATTTTGCGATAGTTAGAAAAGAAGGACAGGAATCGCGCAGAGCAGAAAATTAATATCGCAGCATGATGCATTGTTTCATTTTCTACTTTATTTCCTTCGTTCCAATTCGTGTGAGTTCATGAACGCTCAACCATTTTGTTTCGCAGCACGATTTCAATTCACTCTCGTTTTGCTCATTATTGCTGAATTCATACGTTGTTTCCCTAGTTTCAAAAAGAGAGTTCATCTTTCTGTCGCCATACTCTATAGTTTTATCATTATTTTTTTTGTAACTAACGTCAAATTTTATTTTTCCTAAAATTATAAATATAATAATATATAAATAAATTAATAAAATAATAATAAATATACTTAAAAATTGATAATTTACATGTTCTTTTCAAAGTTTTTTGCACGAGAATGTTGTAAAAGAAAATATAGAATATAATAGATTTATTTGTATTGCATTTTGTTTTTTAAATTTTTTTCATTTTTTCAGAAAAAAAATTAATTTTTTAAAAAAAATTTGTATTTATTAAAAATATTTTTTAAGATTAATAACTAATAAAAAATAAAATAAAATGACCAAAATTTCATAAATAAATGACATAATTATTATATGTATGAAAAATTTTTTAATTTTCAAAATTGTATGCGAAATATAATTATGAAAGTTTATAGAATATGAGTTATAGTTTCAAAAATATAAATTCATTAATGTAAAATGCATTAATATTAACATAATTAATCTTGTCATCGTATTATTCTGGAGTCTGAACAGCTTGTCAAGTGATAAAAAAAATATTTCTTTTGTTACCGAATATTTTTTTCACCATCTGGATATATTTCGTGCGTACATAACCACAAAAATAAGAAAGAAAAAAGCTCGCAAGTGCGCATCTCATTGTTCTTGAGATCCCATTTTCTTCCTTTTTTTCGTCTTTTCTTTTTTTTTCCCCCTTTTTTTCTTTTTTCTTTTTTTTTTTTTTTTTCATGGTGAAGACACGTCGAAGATGAAAAGGAGAGAAAGCTTGCGAGAAATATTCCACAAAGGAAAATTATTTTCTTCTTTTCTTTTTTACGTGATCTTCGTCGAATCGAACATTTTAATTATGGACTCATTTAAAATTGCTTTTATACTCCCATTCCCTCTACAATTTTTAAATGGTTATTAGAAGATAAACATATTATTTAAAATTATAGATATATATATATCTCGTATAAATATTCTTTCATTTTAATTCATTTAATTAATAAATTTTGTAAAATTAAAAGTAAAATTTATGGATAAAAGTGCAGTTTTATAATCTTATTAAAATAAAATTTTTGACTCAACAAACTAAGCAATTTTATTTAAATGTCTCGTTTTTTAAATTAAATTATGAATTTTCTAAACTATTTGGTCATCGTCTACATTTTTAATGCAAATTTTATTATCAATGAAATTGAAAAACATTCTTTCAAAAAATATTAAGAAAAAAATTGCAATTATCTATAAAGAATAATAATTAATCTATTATTAATCTAGATTAATTATTAACTTATATACATAAGTTAAATTAGGTTCACAGTCTTTAACGTATAGAGATTTTAATCATATAGAAAGAACAAAGTAAGGATCTAAACGATGAAGAAAGTTTGTTTTATGGATGAAATATAAACTTCTTTTTTATTATGTAATTACTTCATAAAAACTTTTACACAGTTTCACTTTATGGAGATTGATTGTTACTTGGCTATGGCAAGATGTATTGCAATTTTCGCATTTAGTGTGTTCCGTATCCATCTCGTCATATCTTACCAACTCGTTTCAAACTTTCATTATGTCAGTCTTTTTTCAGTTCTCCTTTGATCACGTTGATGCAGTCACGTGCTCTTTATATCTCTCATCACCTTTTTTTTTTTTTTATCTTTTATGTAGCATATCCGAAATTTGTGCTTTTGTTGACATCTTTTCGTTATATTTAGAATTTCTAATTGTACGTATGAGTTCTTTCAAACTTAAATTGATCAACTCTATTTTCTAAAAGTTCTTCATTTTAAAAGTAATATAACGTTTATTCGTATATTAAATTCTTCTCGCTATATTTTTGAAGGTCATTCTCGTTTGAATTCAGTGAAGCGAATAATTTCACATCAAAACAATCATAAATTTCTTTAAATGTTTTGAACTGACAGTTCTAAACATTAAAAGAACAGAAAAAACATTTCACTACCTGCCTTTCTATATATTCGTCTTTGTCTATAAAGATAAAACGAGCTCAAATTTCATCTCCTTAGCAACAGTATGTCACTAAAGTATATATAAATATTAGTATATATAATATCGTGACCAACTTCAACTTGTGGAGCTTATAATGAATAAATACTGAACATATAATATTATTAACGTATATTTTTAACGTAATTAGAAAACAATTTATCTATATATTACTTTAAATATTTTTTATAAGCATAACAATTCGAAAAAGTTTAGAAAAATTTATATTCCTAAGTTAAATAATTTGATATTTCTTAAAAAATAAATTTACATATTTAAAAACTACAAATAATATACGTATTACAAATAATTTTTATAAATATATTTTCTTATATATTTGTTCGTACCAAAACATGTGAAAAATATTTTAACCTTCGTTTTTCAGTTGAGAAAGTCTAATCTAATCTTTATTACATTCTAGATATCCAAGTTTATTCTTGCTTTCATCCAATTTCTTTATAAAGGTTGGACCTTGAAAGTAATATTTTGATCAGAATTTACCGATCGTGAAACACTGAAACGCAATGCGCCGTTGTGTTGTCTCGACATGTCGACTCATAGGCACGTAACTGCGTATCTGCATTGCCTGCGGCTCTCCGTGTCAGCTTTTTAGTTTTTTACCCTCATGTACACGAAAAGGGCGAAACTACCATTCGAAATTCTCCAAGCTACAATGCACAGGTGTTCACAAAAAAAGCAAGTAAACCCGGCTCACTTCAATGAATAGAGATTCGTTCTCTCAACTCTGTTTCGCTTTTTCCTTCCTAATAATCTTTCCGTTGATTCCTTCTTCTAATTAGCTTTCGATGGAACGATTCACGCATAGGTTTAATTAACGACCAACTTATTCGTGATTCATCCTCTTAGGATAATCAAAATAGATTTTAATTTGGATTTTAATCTGAGGATAAATAGATTGAAAAAAATCTTAAATTTATAAAATGTTATAACAATGGATGTATAGAATATTTTTTCTGAATGAATAGTCGTTTCGAATTATTTGCGATATACGCTTCATATCTTTGCAAAAGTAAATTTACATTAGTGACATTTGTAAACATTTTGCACGGCCAATAGGTATATATATATATATATATATGACTTCTATTGTGTAGAATGTCAAGGCTTACTCGTGTAGTAGAACTAAGAAGACGACGATCTTTCTTTATCAACATCTGAATTATTGATTAAATACAAATTGTTTCTCTAAGATTTTTTCTAAAATAGAAACAATAGAATATTTCCTGGAATATGTTGATTTTATATTTTTTGTTTTATTCTTAAACTCTTTTTTTGTTGTATAACACGTTATATAAGATTTATCGATTTCTCTTTTCATTTACTATTATTAAAGCATAACATGTAGATCTACATTCTCATCTATCATTCGAACATATTGTCTTTTGTACACTAATGACTCAAATATTAAAAAAAAAAATTATTTTGATGACATGTAAAAAGAAATAAAAAATGATTAAATAGAACAGATAATTTGATAATTATTTGAAATTATAAGTCTTTTAGGTTATGTCTTGAAATAAATAAACTATGAAGCTATGATAGCGGCTGCATTTTCATTTAACCTAACTAATATGAAATCATTAAAAAATAACATTTCTCGTTCTATTATTATTGCTATAAAATATAGGAATATAATTATATTTAAATAAATAAAAAGAAACAAGTAAAAATATTTGATCGCAAATTGAGAATAAATTGAGAGTTGTTTTAGTTAATATCTGAACGTTATCTCGAGTCTTATTATCTCAACTATTTCGAAACTTCCGAACCAATTATCCAGTCTAGAAACTCGAGCATATTTGAACAGTTCGTACTTCTTTTTTTTATTTTTTTTTTACCAATATAATATTTACTAACGCTATAAATCTTCTATTAAAATTTTTAAACTCGGGCGAGTTTTATAAACGCGTGATGTATAGAAATAAAAGTGTTATCAATAAGTTGCTTCCAACATCAACGATTTCTATCGATCCTGATTAGTGGTTGATGGAAACGTTTTACAAGATAAATTGTTTTTGTCGTGGTTAAACCCCGGTCACGCCGAGTTAAATGCGGGGATTATTGCCATTGATTAAGAGCAACACTGATTGCGAAAATTACAATGCGCATTCAAGTCTTTGTTTTTACTGTTAACACGAACACCTGAATTTATTAAATTAAAATCAATTTATTAACCATTTTTCTCTATCAAAAAAACAAATATTTTTATAATAAATGTAATAAATACACGCTATTACAAATATATTAATTTAACGAAAAAAAATAAATAACAAAATTAATTAATAAGAAACTTCCTAGAAAATCCCTAGAAAAGTTAGCCAATCGACGAACCAATAAAGACCATTATTTTATCGACTCTCACTCTTCCTAGTAAGTATATATAATACAATATTTGCTTCGAATCTTTCGAATTGAATCAGATCATCCGATTGATCGATCGATTCCAAATCAAAAATATATTTAAAGAGGTATTCGATCGATAATTAATTTTTTTCTCTCTTCTCTCTTTTTATCGGTTTTTTTTTAATGATTGAAAAGATGAATTCAGCGATACGATGTTTGCCATAAAGATAGATCGATCCATCTATAAGGCAAACAGTCCGCGCGACGTGTAATCCTTTTAGGGGATGGTTCGGGCATAGCCTGTTTGCACGTTCTTGAAATGTTCCCGTTTAAAAGCCGGATGATGTTAATTATCCGAGCGGGGTGTACGTGTGGTAGGGGGTTGCAGTTTAAAGGTTGATTTTTATAGCTTGCGTCGTTAGTGTCGCGGGTGTATCGGAGGATATCCGGTTTCGGTCGATTAAAGGGGACCACATATCGCTGAACGATCCGACTAATTAATTACTTAACCTTTCGAGCTCGAAGCATATATTTCTCATAACAACTCGTTAATATTCACGCCTTTCGTAACGTGGTATATGTAGAATTAATTTTTTTTTTTTTTTTAAAGAATGATACGTCCGAGTTATTTCAAGATCATACGTTGTTAAAGATTATTGAATTTGTCAGTGTTATAAATTAAAAATAATTTAAGAGAAGTTAAAATTAAGTCTTATTCAGTACTACACATTGACTGCTCACATTTTTTACCGAATATAAAATATAAAGAAAATAGAATATTTTATTTTTTAAGTAAAAAAGAAAAAAAGTAACAGAGAAATATAAAATTGAACGAAGTTGAAAAATAATTATCTTCTTTCGGAACTTTAAAATTCTCTCGAGTTTACAATTAGAAAAAAAACTTTTCCACTTTTATCTACGCCTAATCGGAAACTGGGCGTTCCACCCGCCCAGTTTCCTGATTTCCCACAAAGTGGAAACATAATTCCAGTAATTTCGCGAAATTTCCGCGTTTCGTCGATGCAACAGCTCCCACCCCCTCCCCTTATTACTTTCCTTTCCACTTCGGGAATAATTTAGCTAATTTCCTAAAGCTTCGACAACGATTGAATCGTCTTCCTTTTCATCGTTTCCCTCGCCGGGGGAAAGCATTTCCTCCGGTTTGCCGGCGCGGTTATCGGATCGAAGGCGTCTCTCCTTCGAGGAGAAGGCCCCGATAAAGGGAGCGGACAAAAGCGTCGCCCGCCGCCGATCGATTTTTCGCCGGATTCTCTTCGTCGTAACGATTCTCCTTTCCTTCTTCCCTTTTCTTCTTCTTGTTACAGCCTGAGAACCGAGCAACCGAGTGGCCTCGACACGGGCGGCGTACGCTTCGAGCTGAGCAGGGCTCTCGATCTGTGGGCGAGGAACTCGAAACTCACCTTTCAGGAAGTTAACAGCGACAGAGCGGATATTCTGGTTTACTTTCATCGGTGAGTTATCTTTTTTTTTCTTTCTTTCTTTCTTTTTTTTTTTATATAATATGATAATGATTGGTTGGACAATTTGTGATTACCATATATTTATATCGTATATTATTTATCGTATTATATTATTTATCGTATTATATTATTTATCGTATATTATATTTATATCGTTCGTATATTATTTTTATTAAGTATTGAATAGGATGGGATACAAAGTTGAAAATTTTTTATGATTATTAATAGGATTAGATTAAAATATTCTGGATTTAATTTATTCTGATTTTTTTTATTTTGTGAGACTTAAAATAAATTTGCTCGAAATAACAATTTAATAAATAATTTATATCTATTGTAAAATTTCAATCATAGTGTTTAAAGTAACATTTGTCAATTTTTTTTTTTTAAATTTGTGAAGTATTAATTATTTATATTTTTAATGATAATTGTAGAATAATGAAATTGTTGATATATCTATGGTTACTGCTATATCCACGAAAATAGGCAAAATACTTTTAATTTTATTCGGTTCAGGGCACGTTTTCATCCAATTTATACGTTCTATTGAGATATTAACACAAGTATTATTGAGATATCAATAATACTGACGCGAATCAGGATGATAATTTGAATCCCTCTATAAAAGTTGAAGGGAGAAAACAAAGAGAGGGGAAATAATGTGAGCGGACAAAGGGCGGGATCAATAGCTCGATTCACGGGCCTCCTTGTTATCGGGAAATTTATCGCAATGACGCAACTGGAAATGAGAGTACGATTAAACGGGAAGGGTTTATTTAAAATCTGCTATTTGCGCGAATTGTTCCGCGGTCGTGAAAGTTACGTATTCTGGTGCGCGTTTATACGTTCGTGAAATATGTCTGGATATAAAAAGGAACGATATAATAAAAAAAAAAATGTTCAATTTAAATAAGATTTAAAAGATTGTTTCATATTATGGCCATAATGATAAATTGTCGAATTTTAATATCGTAAATTAATTATAATTAATTATCAGGTAACAAATTATGACTAGGTTTCTTAAAATTGTATAATTTTATATCGAATGGATATAAAAAGAAATGAAAAAAAAAGAGAGAAAGCTTCAATTTACATAATGAATTATTGAATTATAATATTATAAATTAATTATAATTAATTGTCAAGTGACAAATTGTAGGTTATGAACTCGTAGATTTCTAGTGACAAATTGTAGGTTATGAACTCGTAGATTTCTAGTGACAAATTTGTAGGTTATGAACTCGTAGATTTCTTGAAATTATTCCGAATAGAATAAAATAGAATAAATTTTTTTTTATTTCATTCTTCAAATCTGTTTTATTATATTGAAAAATTTATTAAAATATTAGCGAGATAGCTAATTTATTGTATGCCAAGTTTTTTGATATATTAAGATGTATCGGTTGACATATTTTGCATCTTTAAAAAGTAAATCATTTTTTAAAGTTATATCAAAATCATAATTATTTTGCAAAAAAAAGTCTCGATTATGTCCTATAAACTCGAATAATCGAGTTTCCAATACTTCGCGATATAAAAATATTTAAAAATTTTGTAAACGAAGAAAAATTATTAAGCTCGAATATTAATAATTGTTAAATGAAGCTAATTTTTAATAACGTGTGAAATTAAATAAAATATAGTAAATAAATATTTTATTTTGGAAAGAAAAGTACTACGTTATTCCAATATATCGGTTTCGTATATATGTTGTTAGATATTTACATTGTATAAAACTCGTTTATCTAACTCATTGGTTTTCCTATAGTTTGTAAGTGATGAGAAACTGTTATATAATACATACCTAATTTGTGTGCAACATCTCGCATATAATATCTATGGCGCAGCTATCAGACTGCGCTAAAGTCTTCAACCGATTATCGATCATGTTCATGTCGGTAACACAGTTTGTTTCAAAAGTTCATGTATCTTGATCAACGTTCCTTTTTATAACAAGTTATAACTTCTTCATTAGATTATCGATATCATTTATTTTATAAAAAGTTTAATTTATCAATTATATCGTATAATTGTAAATGAAATTCGATAATTAAAAATAAATTTTTAATAAATAATTTATTTAATAATTATTTTATATTTTATATTTAATTTTATTATGACAATAATAAAATGATGTATTTCTCTTAGTATCACTAATCGAAATAAGCAAACTGTCTTTGTAATTCTCTTGGGATTGTAACGCTCAAATTAATTCTCCTGTTACACGTTTCGATTCCGACTATTGTATGTCAAATTAATATTGGAGAACCGATTCTATTAGCAGAAATAAGTGTTGAAATTAAATGATCGCAAAAGATTAAACTTTGCCTAAGAAGGTAATAATATTCGTATTGTCATTTTAATTTATATTATTTACTTTAACTCTTTCTTAAGAATTATTTTTTCGTTTTGACAATTAGAAAATAAAAATTTTTGTATTGCACTATTTTTCATTTTTATTTATAATTGATTATTTCTTAAAAAGAATAATTTTTTTTTTTTTTGAAAAAAAATAAAGATTTCATTAATTTAAATAAAACATATGGACGTGTACATATACTTGAATATTTATAATTAATAACCTCTAAATAATATTTGTATACAAATTTATAGGTTATATTTTCCTTAAACTAATTCCAAAAATTATTTGTATTTCTTTAATTTTAAAAGCTTGCTTTGAAATTTATCACAATACTGAAATTAATTTTGAATTAAGATAACAAGAAAGAAGAAGAAAGAAAAGAAAAGAACGATTCGCTTTCTTGATTAGCCATCCGAATGGTGCGATATCAGTGGCGTATCGGCTGTCTAGATAATCGACGAGTGCTCGCGAATGGAATTTAATTACGGCCCTTACGGTATAGCATATTTCATTCCAGTTCTGTAGAAAAGGCAAATTAAACGAACCGCAAAACTAAGCGATAGATTGTGCATTATATGTTCGAAATACCGTGAGAAATTAAAGATATAATGTTTAAATAAACAGCACATAAAATATTCTGTGACGTGAAAATATATATAATTAAATTTCTTTGTTAAAATAAAATATCATTCCAATATATCTAATATTATTTTTAAATATTTCTGATTAATATTTGTTTACTAAATTTTACGTGGAATTTTGTATAAATCTTATGTCATATTATATGAATCATATTATATATAGGTTAGTAATATAAAGAAGTGTTTCATTCTGGGCCTGCTAGAGGGATTCAACAGCAGCACCATCTAGATTGTTCATATTCTAGACGCCATATTAGTAATGGCATCCTAAATTAAAGAATGTGTTTGTGGAAATAATTAAGTGAATGCTTGTGAAAATTGTTTTTTGATGTGAATTAGTGACATATATAGAAAAAAATGTTAAAATATAAAACAAATAAAGGTAATTTTATCATGAATTGATAATTATAATTAGTCAATGATAAATTTCATCATATAAATGTAATATACGTATATATAAAACTATAGTTGAAAGGTTAAATACAAATTATTTGTCATGGGCAAATTTTATCATAAATTTGCTTTAAAACTCAAATCAGTTATTAAATACATACAAAAGAGACTTTATCCTTTCTTGCAATAAAAGTATTATTTTTCGATAAAACGCAATAAATCTGTTGCCAAAAATTCTCTTTTCATACTTAAGAATTATCCAAGCTATATTGATAATTCCACATATACCAATCGGCATGAAAAATTTGAATAAAGTCATGATTAAGAGATGATAGGATTTTTATTTGGATTAATATTAATCAAATTTTATAATTAATATTATAAATTACGTTTTATATATATTTATATTTTTATGTAATATCGACACTAATAGTGACATTCTGTTCTGTTTCAGTGGTTATCATGGAGATGGATATCCATTCGATGGCAGAGGCCAAATTCTAGCACACGCATTCTTTCCTGGCAGAGATCGAGGAGGAGACGTACATTTTGATGAGGAAGAAATATGGTTGTTGCAGGGCGACAACAATGAAGAAGGTAAAAAAATATAATATGTCACATTTTCTCTTTTAATATATAATTAATAACTTTATTATTGTACAAAATGATTTTTAAAATAAAATAAAAATATTTTCGATAAAAATTTTATATTTTTAAATAAAATTATATTATTTCGAAACAGAAAACGATAGAAAATTTAAATTATTGTTAATTAAAGATAAATATGTCATATATTGTTTTTATATTCTATTAAACTCGTAAATCCGATGAAACCACAACTTTTTAATTCGGAATATCAACTGAAATCGAGAAGTTAACAATGAAATTTCAAACTAACGATTCAAACTCGTTCAAATATCAAAGTAAATACAATCTCTCTAGAATTATCCTCGGTCGGTAACAATAAATCGTGAAATTTAAACCTGGATTTTATAACAGTGACGAGAGAAAGGCATAAGAGAAAAGTTTAGAGGGATTCGCGGATGAAAAGAAAAGATTCGTGAACCGAGAAATTTTCGCAAGAGAAATCGAGCCCTTCTTGCTTTTTGGCAATTTTCCAATTCGGTCACCCCGTGACCGAAAGAAGAAATAAGGGGATGACGATAGAAAGCGTTTCTCTATTCCACCATATATGCCTTATCGCTATTCTCGATCGATAACATCGCTTATCGTTTTCTAGACTTTAGGAACATATTAATTTAACGATAAATCTTTGTTAAAAAAAATCACTTATAGAAAACTTGAAGTATTGTTCCAAATTTTTGTTCTATTTTTTGAAAATTATAAACTAAATAATTGCTTTTTATTAAACTAAATTTATTTTTTTTTATTGAAATTCAGAATTTATCAGTACTTGCAAATATTTTTTAATATTTTTTTGAAAATTTGAAGTTAATGGTATAAATATTCGATATAATATAGCGCTATTAATAGGAGAATTGAACGACGTAGGTAAATAACAGGATAATTATGTTAATGGAACTATGCAAGGCTAGCAGAGAATGAGGGCTAAGCCAGAATTATTAACGAGGCCAATCGAAATTACACCAATCACCTATCGAAATTGGACTACGTGTAATAATCCGCGATATAGGAAATAGATGATCGATTCTGATTAATCTTTCATGGTTCTTTTTTTATACTTGTGATATCAATCTTAACAATTATAATATCGATTATGAATAATGATTTAATAAATACGATACGAATTATTGTTATCAAGCTTTGAGAAAAAACATTTTTATTTGATAAAATTGGAAAATTTATTGCTTTTTTATTTTACATTCTTTATATTTCAAACTTAAGCTTCAAAATGTTTTACACCAGTAATTAAATGATGTGGTAATCGGACAACACATTCAGGAAATTGTATGAATTTACTCCCATGTAATTGGATTCAGAATTATACTCTCACCTCGAGAATCATTGACGAAATTGTTTGTTCTCGCTTCACTTTGATTATCCCTGTTTCGCGCATTGCATTGTGTCCACATGCATCGTGAAAGATATTTATCTTGTATTTGCTAGATTATTTATTGTCATATAAATTTTTGAAAGGAAAATTATTTGCTTATATTCTCAAATATTTTTAAAAAACAAATTTAATCGAGATTTTTAAAAAAAAAAACAACGCTAGCTTCGAGATTTTTTTTTTTAACAAAAATTATTTTTCGAATAAAAATTCAATTAAAGTTATACATTTTACATGTATCTTTGAGAAAGATAAAATTTTAATTTTACACAATAAATTTATTATATTTTCTGTTGATCAAATATTATTGGATAATGTTCATGCATAATTGAAAAATTAATGTTGTTATCGAGATTCGAATAATAGAAACTATGGTGGTGGGGCCTTTCACAGACAATATGTAGTGTTGGTGTCAGTTATGAATTGCTAATTTCATCGCTGACACATCCCGTCGAGAACCGTAGGACGGTTTGCAAACGATGAGAAGCCGGAACATCACGATTTGCAAATCCATTGGAAAATTAGCATTCTCCTCGAATAGTCTTGACAGAAATACATCTTGAATACGAAACAATTTGAAATTCTATCCAAAATAATCGTGTTTCCGACATATTTTTATGACGAATAAAAATAAATACGATTCGAAATATTTCTGCCTCCTCGTTCAATTTTCAAAATTTTATTTTATAATTTATTGCAAGATTACAAATTTATTTATTTCGTTTATTATTAAAATAAATTTAAATTTTTCTATTTCCTTCTTCTTTTTTACATTATTAATAAAATATAAATATGATTTTCGATGTATTTCGTAACTAATTATTATTTTTCGTGAAATATATTTTTTTCTTTATTTTCTTCTTTATAATTGAAATAATATGTATAAGAAATATTTTTAAATTGTTCGAATAAATTCGTATGTCAAAAACCTATGATCAATAACCATTATGGATCTGATCATGACATAATAAATAAGAATCAGAAAATAATGTATCGCGATATTCTGCGGATGAAACCGATTTAATTTTCTGGTTTGTGCATTTGATAGAAAATATAACAAACGACCGAATAAACACGTTACATATATACGTTACGAAGCGTTAAAATAATCGTGAGATATTTTTGAAAAAATAATTCCAGAAGCCAAAGCAAAAATCAAAAGTCTAACTTCATATGCTTCTATAATTTAACAAATAATTAATCAACATTTTCGTATACCAATTTTTCCGTTTTAACTTTTAAAATCCAAACATAACCTCCAAAGATGTCCATACATTAACAACACTTCGTATATATTTCCAGACAAGACATTTTCTTTTCTTATTTTGTTTCATTTATTGAAAACTTTCCGCTGTAAAATAACATTTAAAATTATTTATCAAGTAAAAATATGTAAGCTTCGATTTAGTGCGGAAGAATAGTACTTGAACTTTAAAAAAGAAAAAAAAAAACTTTAAAGTTCGCAAAAAACTTGCCGGGCATATCGAGCAATCTGAAATGCCCTTCGAGGACGACCGTAATCCATTCCACTTATTTTCATGCTCGTCCTCGAGCGGGCTTTTGATTAAGAGCACTTGACTCTGGTATATTGCAGCCAGCTGCTGTTAACGTCGAGATTCCGAAGTATCACGTGCGACGCGATGAAAGTTCGTAACGAGGAAACTTCCATCGGAAGATGCCACGATTTAGGCCTTCGCATGGACTTCTTTTAATTGACGCTTTCCAATGTCGAATTATCACTTATCTCAAATACGTCAAGTATTTTATCTTGATTTCGTGCGCGAAGTACACGTAATCTATCAGTTTGCAGTTTGTAAAAATTGAAGAATATTTTATTCGAAGTAAGTTGAGTTTTTAGGTTAGGTTTTAATTATATTTCGTTATAATTATTTATATATTGTAAAAAATAATTTATATATTGTAAAAATTGAAGAATATTTTATTCGAAGTAAGTTGAGTTTTTAGGTTAGGTTTTAATTATATAGAATTATTTCGTTATTTCAGAGTTTAGGCTAGTAATAACTTTTAGTTAAATTCTTATAACTTATTAATCGTGCACATTTTAATGAAATAATGAATTAGGTTAGGTTAAGTGCACGTGAAATTTCTTTTTTTTTACGTTTGTTAAAAATATGATTGTTTCAATTAATGTTAGGAAAGAATTTAGATTTAAATTTACTTTTTAAATATTACAACATTTTTCATAGAAAAATTAAGGATATATCACTTAAAAATATGAAATTACGTTTAAAAACATAACCTTTATATTTTCTGTATATAGAAGAGAAAATTTGTATTATCCATATTTTATTCAATTAAATTGACACACACGCATATTAAAATCCTCTTCTTTGATATTAAAATTTGTTAAGTCTCAACATAGGGGGGAAGTTAATCTCATTGAAATAGTACATACCTATATATATATATATATATATATATATATATATATATCTTTAGTCGAGTTGAAAATTTTAAGCTGGGATTCAAGCCAAACACGTTACGCTATTCGTGACAATACCGAGGGTTTACGGATATTGGCTATTCAGGTGTAATCCTTACTATGCCGGTTGATTACATCACCCATCCTTTTCTCAACTATCTTATTTCGTCTAGCTATCGCAAAGGCAGAGTGGGTCTTATTTCGATACTCGAGTCCTCGAAAGTTGGCAACTCTGCAAGCATGCGCAGTCTCACAAGACATATAAAACTATATATATTTCTATTACTGTTCGCAAAATTAAACCAACCTGATATATAATTTGGAAAGACTTCTTTGTTTCGATTCAATTTTGTTTTATCTATTTGTTTCGCATATTTGATATTTTTCATAAATTGTTTCAGAATCAGAAAATAAGATTTGTCCCAAGTTATATATTGAGAAGAAATTCATTGCCTCTCTATTTTAATAATTATTGCTCGAAGAAAGTTCCTGTATAGAATCTGAAATATGCTGATACTCGGTTTAATTAGTTCAGAATTTATTTTCTGCCTTTAATATCTCTTCGAAAACTATTTCCTTTAAAAATTTTCGAAATTGGTGATTATAGGTTAGGAAACATTCTACGTTATATATTTAAATACAATATAGAAATCAGAATTGTTTCTGAATAATACTTTGGGTAACTTTTATTTATTATTTTTAATTTTGATCTATTATATTTTCATTTATAAATAATTCTATTTGATGACAGGTTTTGAGTGACTGACTGACCATCGGTTGACCGCATCTACTGATTGTCCAATGTCTGACCATTAATTGATCAATGGTGTATTTACCGATCAGTAATTTACCAATAATCGATATTCAGAAAATCGAAATGTAATATAATATAGTACGTATAATAATATAAATTATACAAATTATACATTTTATTATTTTTTTCTAGATAATAAATTTTACATATAACGAATGAAGTTCGAATAAATTTAACGAAACATTAAATTACATTACGTTAATTTATCTCGACAGATATTACTACTAGAACGTTATTTAGAACAACGTTACAGTCGAACAGAATAAAAAGAGGAGAAATTGATGTAGATTTTTTTCAGTGATACGTGAGAAAGGAAACGATCGCATTTATTCCCTCTTTCGTAGTAACTGAGCACGCTTCCTTTATCGCCGGCCCTCCCAAGCTTTAATTTTATGATTTTGACCCACATTTTAAAACGAATGTCCCGAATGCGAAGCGAGACGGAACATAGATAAAAAAAAAAGAGATCAAAAGAAAAAGCACGTTAACGCCTCGAACTCGATGCCTCCTGTGAAAACTTTAATATCCATCGTCACAAACGTAAATATTATCAGGATTCCTCTTTCACGAATAATATATCCCGAATAGAAACGTTTCGTGTATATATATATATATACGATATTCGTCGAGATTAAAAGATTATTCCAGATATCGAAGAATTGTGAAATATTATACTTGTTTTCCATTCTATTACGAAACTAATATCTTTAAATGTAAGAAATGTAAAATTAAAATTTCTGATATACAAAATTTTAAATGTTAAATTATTCAAGTTGGTTAAATTTTATTTTAAGATGACCTAATATAATTTAATTTATGTTATTAATTTTTTATTGGAAAATAATTGCGAATTTTGAATAATTTTTTTAAAACAAATGAATCGATAATTAATCAATATTTATTATAACAATATTTGAATATTATTTCCACGAATTACATTTAATGTTCAATTTTATCCTCGCGCAATTTATGGCTTAGGTTTTCATTTATATATTGTTAATATTTGAATTATTATTACAAATTGATGTTATCGTATGTTAATTATTATTGTTTACTTCACCTTATCCGCTTCGTGTTTATATTTAATTAATCTCTTATTTTGTGTTTATGGATTCGTGGATTTAAATAAAATGTACAATTATTGTTTCTAATTAAATCTCTTTATCATTTATCTTTAGCGAAAATTTAATATATATATTTTTTTAAATTTCTTTTTCATGTTTTGTAACACGTAATTAATTTTTAAAATAAACTTTGTTTGAAAATTTTTTTTATATATATAATTATTTAATAAGTTTCTTATTAATTTTTTCAAACTTCATTTTCTGTGAACATGTTTCTTATGAATTTTCCTGAAAATGGAATAAATGCATACCACTCTTAGACTCTTAGATTATAAATAAATTTAGAAAATTTTGTACACAGTTTATAATAAAAATATGAAAAAATTGCAGTATTGCAAGTTAACAATCTATAAGAATTTCATTTCAAATGACTTATAAATCATCAACTTGGTATATCCTTTTAAAAAAGTATCCAAATTATCTTCTTTTTCCCTGGAATTTTATTTCCTCTTCAAAATGTTGTAGTTTGTTCAAGCTTGCTTAAAAGAAACTTTATTTTCTTTTTTCAAAAAACAAAAAAAAAACTTGGAGAAAGATTCTGGAAGGAAAATAGATATGGTCGACTAAGAAGTTTGAAACATTTCCTTCGCTTTCAGGGACCAGCCTTTTCGCAGTAGCCGCGCATGAATTTGGCCACTCACTTGGATTGGCACATAGCTCGGTTCCTGGTGCACTCATGTATCCCTGGTATCAAGGATTGAGCTCTAATTACGAGTTGCCGGAAGACGACAGACATGGGATTCAACAGATGTACGGTGAGTGAGTGTATATAATTGCATAGTTGAAAAGCAATAATTATTCTAATTTATTATTCTGTACTAATTTAAAAAATAATGTTCTTTTTAGAGATCAATCAAGATATATTTTTTTTCATTTTTTTCAGTCATGATTAAATTGTAAAATACATTTTGTAAGTAAAATATGGAAACAAATTTTTTCTTCATATGTATCAGTTAATGAAATAATAATAGCTTG')

}, 10000)


test('write a gff3 of a simple mRNA model', async () => {
// 5. write file / to text cds
  const writeFileObject = <any><unknown>{
    username: TEST_USER,
    password: 'sadf',
    type: 'GFF3',
    seqType: 'genomic',
    format: 'text',
    organism: TEST_ORGANISM,
    output: 'text',
    sequences: [TEST_SEQUENCE],
  }
  // plain GF3
  let gff3Text = await writeFile(writeFileObject) as string
  let gff3Lines = gff3Text.split('\n')
  expect(gff3Lines[0]).toEqual('##gff-version 3')
  expect(gff3Lines[1]).toContain('Group1.10\t.\tgene\t1216825\t1235616\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[1]).toContain('Name=GB40856-RA')
  expect(gff3Lines[2]).toContain('Group1.10\t.\tmRNA\t1216825\t1235616\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[2]).toContain('Name=GB40856-RA-00001')
  // 5 exons, 5 CDS, 1 gene, 1 mrNA
  let codingGff3Lines = gff3Lines.filter(f => !f.startsWith('#') && f.length > 0)
  expect(codingGff3Lines.length).toEqual(12)
  let exonLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\texon'))
  expect(exonLines.length).toEqual(5)
  expect(exonLines.filter(f => f.indexOf('\t.\t+\t.')).length).toEqual(5)
  expect(codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS')).length).toEqual(5)
  let cdsLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS'))
  expect(cdsLines.length).toEqual(5)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t0') > 0).length).toEqual(1)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t1') > 0).length).toEqual(2)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t2') > 0).length).toEqual(2)


  // export genomic sequence now
  writeFileObject.exportGff3Fasta = true
  gff3Text = await writeFile(writeFileObject) as string
  gff3Lines = gff3Text.split('\n')
  expect(gff3Lines[0]).toEqual('##gff-version 3')
  expect(gff3Lines[1]).toContain('Group1.10\t.\tgene\t1216825\t1235616\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[1]).toContain('Name=GB40856-RA')
  expect(gff3Lines[2]).toContain('Group1.10\t.\tmRNA\t1216825\t1235616\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[2]).toContain('Name=GB40856-RA-00001')
  // 5 exons, 5 CDS, 1 gene, 1 mrNA
  expect(gff3Lines.length).toEqual(23438)
  codingGff3Lines = gff3Lines.filter(f => f.startsWith('Group1.10\t'))
  expect(codingGff3Lines.length).toEqual(12)
  exonLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\texon'))
  expect(exonLines.length).toEqual(5)
  expect(exonLines.filter(f => f.indexOf('\t.\t+\t.')).length).toEqual(5)
  expect(codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS')).length).toEqual(5)
  cdsLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS'))
  expect(cdsLines.length).toEqual(5)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t0') > 0).length).toEqual(1)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t1') > 0).length).toEqual(2)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t2') > 0).length).toEqual(2)

  const sequenceIndex = gff3Lines.indexOf('##FASTA')
  expect(sequenceIndex).toBeGreaterThan(12)
  expect(gff3Lines.indexOf('>Group1.10')).toEqual(sequenceIndex + 1)
  expect(gff3Lines.indexOf('GCCAGGGAATGGCTTGTCATTAGGGACAACTTGTCAAGTCCCTAGCTTTTTATGATGTAT')).toEqual(sequenceIndex + 2)


}, 10000)

test('write a gff3 with an added pseudogene', async () => {
  const addPseudogeneCommand = <JSON><unknown>{
    'username': TEST_USER,
    'password': 'secret',
    'organism': TEST_ORGANISM,
    'sequence': TEST_SEQUENCE,
    'features': [{
      'location': {'fmin': 433518, 'fmax': 437436, 'strand': 1},
      'type': {'cv': {'name': 'sequence'}, 'name': 'pseudogene'},
      'children': [{
        'location': {'fmin': 433518, 'fmax': 437436, 'strand': 1},
        'type': {'cv': {'name': 'sequence'}, 'name': 'transcript'},
        'name': 'GB40815-RA',
        'children': [{
          'location': {'fmin': 433518, 'fmax': 433570, 'strand': 1},
          'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
        }, {
          'location': {'fmin': 436576, 'fmax': 436641, 'strand': 1},
          'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
        }, {
          'location': {'fmin': 437424, 'fmax': 437436, 'strand': 1},
          'type': {'cv': {'name': 'sequence'}, 'name': 'exon'}
        }, {
          'location': {'fmin': 433518, 'fmax': 437436, 'strand': 1},
          'type': {'cv': {'name': 'sequence'}, 'name': 'CDS'}
        }]
      }]
    }]
  }

  // add pseudogene after included transcript
  const annotationsFoundResponse0 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound0 = new GenomeAnnotationGroup(annotationsFoundResponse0)
  expect(genomeAnnotationFound0.features.length).toEqual(1)

  const returnObject = await addFeature(addPseudogeneCommand)
  const returnGenomeAnnotationGroup = new GenomeAnnotationGroup(returnObject)
  expect(returnGenomeAnnotationGroup.features.length).toEqual(1)
  const returnFeature = returnGenomeAnnotationGroup.features[0]
  expect(returnFeature.name).toEqual('GB40815-RA-00001')
  // 2 exons, 1 CDS, 2 non-canonical five-prime splice sites, 1 non-canonical three-prime splice sites
  expect(returnFeature.children.length).toEqual(3)
  const pseudogeneUniqueName = returnFeature.uniqueName


  // 3. get features to confirm it is added
  const annotationsFoundResponse1 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound1 = new GenomeAnnotationGroup(annotationsFoundResponse1)
  expect(genomeAnnotationFound1.features.length).toEqual(2)
  const addedFeature1 = genomeAnnotationFound1.features.filter(f => f.uniqueName === pseudogeneUniqueName)[0]
  expect(addedFeature1.location?.fmin).toEqual(433518)
  expect(addedFeature1.location?.fmax).toEqual(437436)
  expect(addedFeature1.children?.length).toEqual(3)
  expect(addedFeature1.uniqueName).toBeDefined()

  const writeFileObject = <any><unknown>{
    username: TEST_USER,
    password: 'sadf',
    type: 'GFF3',
    seqType: 'genomic',
    format: 'text',
    organism: TEST_ORGANISM,
    output: 'text',
    sequences: [TEST_SEQUENCE],
  }
  // plain GF3
  let gff3Text = await writeFile(writeFileObject) as string
  let gff3Lines = gff3Text.split('\n')
  expect(gff3Lines[0]).toEqual('##gff-version 3')
  expect(gff3Lines[1]).toContain('Group1.10\t.\tpseudogene\t433519\t437436\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[1]).toContain('Name=GB40815-RA')
  expect(gff3Lines[2]).toContain('Group1.10\t.\ttranscript\t433519\t437436\t.\t+\t.\towner=test@test.com;')
  expect(gff3Lines[2]).toContain('Name=GB40815-RA-00001')
  // 5 exons, 5 CDS, 1 gene, 1 mrNA
  const codingGff3Lines = gff3Lines.filter(f => !f.startsWith('#') && f.length > 0)
  expect(codingGff3Lines.length).toEqual(12 + 5) // 12 original + 3 exons + transcript + pseudogene
  const exonLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\texon'))
  expect(exonLines.length).toEqual(5 + 3)
  expect(exonLines.filter(f => f.indexOf('\t.\t+\t.')).length).toEqual(5 + 3)
  expect(codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS')).length).toEqual(5)
  const cdsLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS'))
  expect(cdsLines.length).toEqual(5)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t0') > 0).length).toEqual(1)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t1') > 0).length).toEqual(2)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t2') > 0).length).toEqual(2)

  writeFileObject.exportGff3Fasta = true
  gff3Text = await writeFile(writeFileObject) as string
  gff3Lines = gff3Text.split('\n')
  const sequenceIndex = gff3Lines.indexOf('##FASTA')
  expect(sequenceIndex).toBeGreaterThan(17)
  expect(gff3Lines.indexOf('>Group1.10')).toEqual(sequenceIndex + 1)
  expect(gff3Lines.indexOf('GCCAGGGAATGGCTTGTCATTAGGGACAACTTGTCAAGTCCCTAGCTTTTTATGATGTAT')).toEqual(sequenceIndex + 2)
})

test('write a gff3 with an added repeat region', async () => {

  const addRepeatRegionCommand = <JSON><unknown>{
    'username': TEST_USER,
    'password': 'secret',
    'organism': TEST_ORGANISM,
    'sequence': TEST_SEQUENCE,
    'features': [{
      'location': {'fmin': 414369, 'fmax': 414600, 'strand': 0},
      'type': {'cv': {'name': 'sequence'}, 'name': 'repeat_region'},
      'name': 'GB40814-RA'
    }]
  }

  // add pseudogene after included transcript
  const annotationsFoundResponse0 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound0 = new GenomeAnnotationGroup(annotationsFoundResponse0)
  expect(genomeAnnotationFound0.features.length).toEqual(2)

  const returnObject = await addFeature(addRepeatRegionCommand)
  const returnGenomeAnnotationGroup = new GenomeAnnotationGroup(returnObject)
  expect(returnGenomeAnnotationGroup.features.length).toEqual(1)
  const returnFeature = returnGenomeAnnotationGroup.features[0]
  expect(returnFeature.name).toEqual('GB40814-RA')
  // 2 exons, 1 CDS, 2 non-canonical five-prime splice sites, 1 non-canonical three-prime splice sites
  expect(returnFeature.children.length).toEqual(0)
  const repeatRegionUniqueName = returnFeature.uniqueName


  // 3. get features to confirm it is added
  const annotationsFoundResponse1 = await annotationEditorCommand(getFeaturesCommand, 'getFeatures')
  const genomeAnnotationFound1 = new GenomeAnnotationGroup(annotationsFoundResponse1)
  expect(genomeAnnotationFound1.features.length).toEqual(3)
  const addedFeature1 = genomeAnnotationFound1.features.filter(f => f.uniqueName === repeatRegionUniqueName)[0]
  expect(addedFeature1.location?.fmin).toEqual(414369)
  expect(addedFeature1.location?.fmax).toEqual(414600)
  expect(addedFeature1.children.length).toEqual(0)
  expect(addedFeature1.uniqueName).toBeDefined()

  const writeFileObject = <any><unknown>{
    username: TEST_USER,
    password: 'sadf',
    type: 'GFF3',
    seqType: 'genomic',
    format: 'text',
    organism: TEST_ORGANISM,
    output: 'text',
    sequences: [TEST_SEQUENCE],
  }
  // plain GF3
  let gff3Text = await writeFile(writeFileObject) as string
  let gff3Lines = gff3Text.split('\n')
  expect(gff3Lines[0]).toEqual('##gff-version 3')
  const repeatRegionLine = gff3Lines.filter (f => f.indexOf('repeat_region')>0)[0]
  console.log('repeat region line',repeatRegionLine)
  expect(repeatRegionLine).toContain('Group1.10\t.\trepeat_region\t414370\t414600\t.\t.\t.\towner=test@test.com;')
  expect(repeatRegionLine).toContain('Name=GB40814-RA')
  // 5 exons, 5 CDS, 1 gene, 1 mrNA
  const codingGff3Lines = gff3Lines.filter(f => !f.startsWith('#') && f.length > 0)
  expect(codingGff3Lines.length).toEqual(12 + 5 + 1) // 12 original + 3 exons + transcript + pseudogene + repeat_region
  const exonLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\texon'))
  expect(exonLines.length).toEqual(5 + 3)
  expect(exonLines.filter(f => f.indexOf('\t.\t+\t.')).length).toEqual(5 + 3)
  expect(codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS')).length).toEqual(5)
  const cdsLines = codingGff3Lines.filter(f => f.startsWith('Group1.10\t.\tCDS'))
  expect(cdsLines.length).toEqual(5)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t0') > 0).length).toEqual(1)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t1') > 0).length).toEqual(2)
  expect(cdsLines.filter(f => f.indexOf('\t.\t+\t2') > 0).length).toEqual(2)

  writeFileObject.exportGff3Fasta = true
  gff3Text = await writeFile(writeFileObject) as string
  gff3Lines = gff3Text.split('\n')
  const sequenceIndex = gff3Lines.indexOf('##FASTA')
  expect(sequenceIndex).toBeGreaterThan(17)
  expect(gff3Lines.indexOf('>Group1.10')).toEqual(sequenceIndex + 1)
  expect(gff3Lines.indexOf('GCCAGGGAATGGCTTGTCATTAGGGACAACTTGTCAAGTCCCTAGCTTTTTATGATGTAT')).toEqual(sequenceIndex + 2)
})

beforeAll(async () => {
  const result = await removeEmptyCommonDirectory()

  // 0. if user does not exist
  let user = await getUser(TEST_USER) as User
  if (!user) {
    const addedUser = await addUser(TEST_USER, 'Admin', 'User', Role.ADMIN,) as User
    sleep(1000)
    user = await getUser(TEST_USER) as User
  }

  // 3. if organism with directory exists
  let organism: Organism = await getOrganism(TEST_ORGANISM) as Organism

  // 4. add organism directory
  if (!organism || organism.commonName !== TEST_ORGANISM) {
    await addOrganismWithDirectory(
      `${APOLLO_DATA}/sequences/honeybee-Group1.10/`,
      TEST_ORGANISM
    )
    organism = await getOrganism(TEST_ORGANISM) as Organism
  }
})

afterAll(async () => {

  // TODO:
  let organism = await getOrganism(TEST_ORGANISM) as Organism

  if (organism && organism.commonName === TEST_ORGANISM) {
    const totalDeleted = await deleteOrganismFeatures(TEST_ORGANISM)
    organism = await deleteOrganism(TEST_ORGANISM) as Organism
  }
  let user = await getUser(TEST_USER) as User
  if (user && user.username === TEST_USER) {
    user = await deleteUser(TEST_USER) as User
  }

  // sleep(3000)

  user = await getUser(TEST_USER) as User
  organism = await getOrganism(TEST_ORGANISM) as Organism
})

